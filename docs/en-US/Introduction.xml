<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "REST_API_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-REST_API_Guide-Introduction">
  <title>Introduction</title>
  <para>
    Red Hat Enterprise Virtualization Manager provides a <emphasis role="bold">Representational State Transfer (REST)</emphasis> API. The API provides software developers and system administrators with control over their Red Hat Enterprise Virtualization environment outside of the standard web interface. The REST API is useful for developers and administrators who aim to integrate the functionality of a Red Hat Enterprise Virtualization environment with custom scripts or client-side applications that are able to send Hypertext Transfer Protocol (HTTP) requests and interpret responses.
  </para>
  <para>Other benefits of the REST API include:</para>
  <itemizedlist>
    <listitem>
      <para>
        The ability to customize features of your Red Hat Enterprise Virtualization environment.
      </para>
    </listitem>
    <listitem>
      <para>
        The potential to automatically complete tasks, such a system maintenance and error checking.
      </para>
    </listitem>
    <listitem>
      <para>
        Repetitive tasks in a Red Hat Enterprise Virtualization environment are completed with simple scripts.
      </para>
    </listitem>
    <listitem>
      <para>
        The API is cross-platform and any system that accesses HTTP fulfils the basic requirements to access the REST API.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    This documentation acts as a reference to the Red Hat Enterprise Virtualization Manager REST API. It aims to provide developers and administrators with instructions and examples to help harness the functionality of their Red Hat Enterprise Virtualization environment through the REST API.
  </para>
  <para>
    Explaining the Red Hat Enterprise Virtualization Manager REST API requires an examination of REST architectural style and RESTful web services in the context of a virtualization environment. The following sections provide an overview of REST architecture through explanations of the key REST terms.
  </para>

  <section id="sect-REST_API_Guide-Introduction-Overview-Resources">
    <title>Resources</title>
    <para>
      A REST API focuses primarily on <emphasis role="bold">resources</emphasis> of a specific service. A resource is a key abstraction of information and in the context of virtualization represents an individual component, capability or data set in the virtualizaion infrastructure. 
    </para>
  </section>
    
  <section id="sect-REST_API_Guide-Introduction-Overview-Collections">
    <title>Collections</title>
    <para>
    Red Hat Enterprise Virtualization Manager's REST API groups resources into individual <emphasis role="bold">collections</emphasis> based on the management infrastructure types in a Red Hat Enterprise Virtualization environment. Examples of collections include data centers, clusters, storage domains, hosts, and virtual machines.
    </para>
    <para>
      Some resources contain additional <emphasis role="bold">sub-collections</emphasis> that relate to the resource in question. For example, a virtual machine contains sub-collections for resources such as network interfaces, storage disks, and CD-ROMs.
    </para>
    <para>
      This establishes a layered relationship model using collections, resources and sub-collections in a Red Hat Enterprise Virtualization environment.
    </para>
  </section>

  <section id="sect-REST_API_Guide-Introduction-Overview-URIs">
    <title>URIs</title>
    <para>
      A user performs a request on any part of the API model to control the virtualization environment. For example, access to all resources in a collection requires only a request to the collection itself. Access to a specific resource requires a request to the resource within the context of its collection. An API user targets these requests to a specific location called a <emphasis role="bold">Uniform Resource Identifier (URI)</emphasis>.
    </para>
    <para>
      The REST API combines our virtualization model with the use of HTTP to construct a series of <emphasis role="bold">Uniform Resource Identifiers (URIs)</emphasis> for collections and resources. This means an API user accesses collections and resources in a manner similar to loading a webpage on the internet. For example, an API user accesses a collection group called <literal>collection</literal> from a REST API installed at <uri>www.example.com</uri> with the following URI:
    </para>
    <screen>
http://www.example.com/collection
    </screen>
    <para>
      Access to a resource called <literal>resource</literal> within <literal>collection</literal> requires the following URI:
    </para>
    <screen>
http://www.example.com/collection/resource
    </screen>
    <para>
      In the context of a Red Hat Enterprise Virtualization environment, the API provides access to a virtual machine resource with an identication code of <literal>6efc0cfa-8495-4a96-93e5-ee490328cf48</literal> within the <literal>vms</literal> collection installed at <uri>http://www.example.com/rhevm-api/</uri> with the following URI:
    </para>
    <screen>
http://www.example.com/rhevm-api/vms/6efc0cfa-8495-4a96-93e5-ee490328cf48
    </screen>
  </section>
    
  <section id="sect-REST_API_Guide-Introduction-Overview-Representations">
    <title>Representations</title>
    <para>
      Access to a resource URI in a RESTful web service does not mean direct access to the resource itself but to an abstraction of the resource. This abstraction is called a <emphasis role="bold">representation</emphasis>. The API constructs representations using various formats but this documentation focuses primarily on XML representations.
    </para>
    <para>
      When working with a specific resource, the API constructs a representation using <emphasis role="bold">elements</emphasis>. When an API user accesses <uri>http://www.example.com/collection/resource</uri>, an XML resource representation structures elements in the following way:
    </para>
    <screen>
&lt;resource&gt;
    &lt;element_one&gt;value one&lt;/element_one&gt;
    &lt;element_two&gt;value two&lt;/element_two&gt;
    &lt;element_three&gt;value three&lt;/element_three&gt;
    ...
&lt;/resource&gt;
    </screen>
    <para>  
      Elements can also contain <literal>attributes</literal>, which provide information about the element itself:
    </para>
    <screen>
&lt;resource&gt;
    &lt;element attribute="value"/&gt;
    ...
&lt;/resource&gt;
    </screen>
    <para>  
      A virtual machine resource contains elements such as machine type, operational status, memory in bytes, CPUs and creation time. These elements form a basic XML structure for a virtual machine resource representation:
    </para>
    <screen>
&lt;vm&gt;
    &lt;type&gt;server&lt;/type&gt;
    &lt;status&gt;UP&lt;/status&gt;
    &lt;memory&gt;536870912&lt;/memory&gt;
    &lt;cpu&gt;
        &lt;topology cores="1" sockets="1"/&gt;
    &lt;/cpu&gt;
    &lt;creation_time&gt;2011-01-25T13:53:15.103+10:00&lt;/creation_time&gt;
&lt;/vm&gt;
    </screen>
    <para>  
      This example shows how the resource representation portrays complex elements, such as <literal>cpu</literal> and <literal>topology</literal> information. Complex elements contain sub-elements to depict multiple properties of a single element. This demonstrates how REST representations use XML to depict very specific aspects of resources and their elements.
    </para>
  </section>

  <section id="sect-REST_API_Guide-Introduction-Overview-Requests">
    <title>Requests</title>
    <para>
      The REST API uses HTTP as a protocol to transfer a <emphasis role="bold">request</emphasis> for a resource representation from a <emphasis role="bold">client</emphasis> to the Red Hat Enterprise Virtualization Manager <emphasis role="bold">server</emphasis>:
    </para>
    <screen>
GET /collection/resource HTTP/1.1
Host: www.example.com
Accept: application/xml
    </screen>
    <para>
      This follows the standard HTTP request message format including:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          A <emphasis role="bold">Request-Line</emphasis>, which requires:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              a <emphasis role="bold">method</emphasis> e.g. <literal>GET</literal>;
            </para>
          </listitem>
          <listitem>
            <para>
              a <emphasis role="bold">URI</emphasis> e.g <literal>/collection/resource</literal>; and
            </para>
          </listitem>
          <listitem>
            <para>                    
              a <emphasis role="bold">HTTP version</emphasis> e.g <literal>HTTP/1.1</literal>.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          A <emphasis role="bold">Header</emphasis> with fields to define parameters that process a request e.g. <literal>Host:</literal> and <literal>Accept:</literal>; and
        </para>
      </listitem>
      <listitem>
        <para>
          An optional <emphasis role="bold">Message Entity</emphasis> depending on the request <emphasis role="bold">method</emphasis>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Requests from a client to a server contain all necessary information to process the request without depending on any previous request or stored context on the server, which makes the REST API a <emphasis role="bold">stateless</emphasis> communication.
    </para>
  </section> 
    
  <section id="sect-REST_API_Guide-Introduction-Overview-Methods">
    <title>Methods</title>
    <para>
      The benefit of using HTTP to communicate with the REST API is the ability to use a <emphasis role="bold">method</emphasis> to access Red Hat Enterprise Virtualization resources. A method defines the type of request to a resource. The REST API uses four HTTP methods:
    </para>
    <informaltable frame="none">
      <tgroup cols="2">
        <colspec colwidth="2*"/>
        <colspec colwidth="8*"/>
        <thead>
          <row>
            <entry>Method</entry>
            <entry>Decription</entry>
          </row>
        </thead>
        <tbody>
          <row><entry><literal>GET</literal></entry><entry>Retrieve a resource or collection representation</entry></row>
          <row><entry><literal>POST</literal></entry><entry>Create a resource based upon a user-defined representation</entry></row>
          <row><entry><literal>PUT</literal></entry><entry>Update a resource based upon a user-defined representation</entry></row>
          <row><entry><literal>DELETE</literal></entry><entry>Remove a resource</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>
      The default method is <literal>GET</literal> but an API user has a choice of any of the four methods to access and control resources in their virtualization environment.
    </para>
  </section>

  <section id="sect-REST_API_Guide-Introduction-Overview-Headers">
    <title>Headers</title>
    <para>
      The HTTP request contains a <emphasis role="bold">header</emphasis> to define HTTP parameters. The header uses specific <emphasis role="bold">header fields</emphasis> to define these  parameters. All are optional except for two requried in the context of the REST API: 
    </para>
    <informaltable frame="none">
      <tgroup cols="2">
        <colspec colwidth="2*"/>
        <colspec colwidth="8*"/>
        <thead>
          <row>
            <entry>Header</entry>
            <entry>Decription</entry>
          </row>
        </thead>
        <tbody>
          <row><entry><literal>Host:</literal></entry><entry>The target host of the URI i.e. the location of the Red Hat Enterprise Virtualization environment and REST API</entry></row>
          <row><entry><literal>Accept:</literal></entry><entry>The accepted format for the representation. This documentation uses the <literal>application/xml</literal> to define the representation structure as XML format.</entry></row>
        </tbody>
      </tgroup>
    </informaltable>
    <para>This documentation defines optional header fields in later chapters.</para>
  </section>

  <section id="sect-REST_API_Guide-Introduction-Overview-Entities">
    <title>Message Entities</title>
    <para>
      It is possible for a HTTP request to contain a <emphasis role="bold">message entity</emphasis>. Use of <literal>POST</literal> or <literal>PUT</literal> methods often requires an additional <emphasis role="bold">message entity</emphasis> in the request:
    </para>
    <screen>
POST /collection HTTP/1.1
Host: www.example.com
Accept: application/xml

&lt;resource&gt;
    &lt;element&gt;value&lt;/element&gt;
&lt;/resource&gt;
    </screen>
    <para>
      The message entity accepts a user-defined resource representation sent to the URI. <literal>POST</literal>ing this message entity creates a new <literal>resource</literal> with <literal>value</literal> in <literal>element</literal> to represent a resource setting. <literal>PUT</literal>ing a message entity updates <literal>element</literal> in the resource with <literal>value</literal>. This means a user can define properties for new or existing resources using a resource representation in the message entity of a request. In the context of a Red Hat Enterprise Virtualization environment, an API user creates a new VM with the following request:
    </para>
    <screen>
POST /rhevm-api/vms HTTP/1.1
Host: www.example.com
Accept: application/xml

&lt;vm&gt;
    &lt;name&gt;vm1&lt;/type&gt;
    &lt;description&gt;vm1&lt;/description&gt;
    &lt;memory&gt;536870912&lt;/memory&gt;
    &lt;cluster&gt;
        &lt;name&gt;Default&lt;/name&gt;
    &lt;/cluster&gt;
    &lt;template&gt;
        &lt;name&gt;blank&lt;/name&gt;
    &lt;/template&gt;    
&lt;/vm&gt;
    </screen>
    <para>
      A request result also uses an XML resource representation in the message entity to provide the user with the required abstracted information. 
    </para>
  </section>
    
  <section id="sect-REST_API_Guide-Introduction-Overview-Actions">
    <title>Actions</title>
    <para>
      Some resources provide specialized URIs for <emphasis role="bold">actions</emphasis>. An API user performs a request on a resource's action, which launches a task specific to that resource.
    </para>
    <para>
      A virtual machine contains functions to start, stop and shutdown. The API abstracts these function as actions specific to each virtual machine resource:
    </para>
    <screen>
&lt;vm id="6efc0cfa-8495-4a96-93e5-ee490328cf48" href="/rhevm-api/vms/6efc0cfa-8495-4a96-93e5-ee490328cf48"&gt;
    &lt;actions&gt;
        &lt;link rel="start"
          href="/rhevm-api/vms/6efc0cfa-8495-4a96-93e5-ee490328cf48/start"/&gt;
        &lt;link rel="stop"
          href="/rhevm-api/vms/6efc0cfa-8495-4a96-93e5-ee490328cf48/stop"/&gt;
        &lt;link rel="shutdown"
          href="/rhevm-api/vms/6efc0cfa-8495-4a96-93e5-ee490328cf48/shutdown"/&gt;
        ...
    &lt;/actions&gt;
&lt;/vm&gt;
    </screen>    
  </section>

</chapter>
